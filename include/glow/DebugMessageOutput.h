#pragma once

#include <string>
#include <vector>
#include <unordered_map>
#include <functional>

#include <GL/glew.h>

#include <glow/glow.h>

#ifndef _MSC_VER
#	define APIENTRY
#endif


namespace glow
{

class GLOW_API DebugMessage
{
public:
    DebugMessage(GLenum source, GLenum type, GLuint id, GLenum severity, const std::string& message);

    const char* severityString() const;
    const char* sourceString() const;
    const char* typeString() const;

    std::string toString() const;
public:
    GLenum source;
    GLenum type;
    GLuint id;
    GLenum severity;
    std::string message;
public:
    static const char* severityString(GLenum severity);
    static const char* sourceString(GLenum source);
    static const char* typeString(GLenum type);
};

class GLOW_API DebugMessageOutput
{
public:
    typedef std::function<void(const DebugMessage&)> Callback;

    /** Sets up a context specific debug message error callback that outputs
        every incomming warning/error message generated by the driver.
        This should be faster than using glGetError / CheckGLError and allows
        adjustments to error type and severity per context.

        To avoid performance loss (even in DEBUG mode) this needs to be set
        manually for every context required. Further, in DEBUG, the default
        global gl error checking needs to be disabled manually.

        Note: this requires the GL_ARB_debug_output extension. Or at least a
        4.3 core profile. The output can be locally disabled via glEnable and
        glDisable(GL_DEBUG_OUTPUT) - this sets DEBUG_OUTPUT_SYNCHRONOUS_ARB.
    */
    static void enable();
    static void disable();

    static void setSynchronous(bool synchronous);
    static void addCallback(Callback callback);


    // PRE-ARB_debug_output
    static void checkError(const char * file, int line);
private:
    DebugMessageOutput();
protected:
    static bool s_errorChecking;

    static int s_nextId;
    static std::unordered_map<long long, int> s_ids;
    static std::unordered_map<int, std::vector<Callback>> s_callbacks;

    static unsigned getId();

    static void APIENTRY handleMessage(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const char * message, void * param);
    static void handleMessage(const DebugMessage& message, int id);
};

#ifdef NDEBUG
#define CheckGLError()
#else
#define CheckGLError() glow::DebugMessageOutput::checkError(__FILE__, __LINE__)
#endif

} // namespace glow
