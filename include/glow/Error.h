#pragma once

#include <string>
#include <vector>

#include <GL/glew.h>

#include <glow/glow.h>

#ifndef _MSC_VER
#	define APIENTRY
#endif


namespace glow 
{

/**
 * \brief Error provides an object oriented interface to OpenGL errors.
 *
 * To access the current Error (which can be none), call current().
 * To globally enable or disable error checking within glow, call setChecking().
 * If checking is enabled and debug output is disabled and NDEBUG isn't set, any error occuring in glow will result in an exception.
 * If NDEBUG is set to true, error checking is always disabled.
 * To discard any current error, call clear().
 * To enable error reporting via callback instead of exceptions, enable debug output with setupDebugOutput().
 * This call will only have an effect if the extension ARB_debug_output is available on the current system. 
 * 
 */
class GLOW_API Error
{
public:
	Error();
	Error(GLenum errorCode);

    static Error get();

	static void clear();

	GLenum code() const;
	std::string name() const;

	bool isError() const;
    operator bool() const;

    static const char* errorString(GLenum errorCode);


    // PRE-ARB_debug_output

    /** Returns if glow internal error checking via CheckGLError macro is
        enabled or not. Note that checking is disabled via NDEBUG.
    */
    static bool isChecking();

    /** Enables or disables glow's internal error checking. This also affects
        any call to CheckGLError, but not Error::check itself. Note that
        checking cannot be enabled in NDEBUG and for performance reasons is
        enabled or disabled for in all contexts equally (context specific
        checking would require platform specific context id retrieval).
    */
    static void setChecking(const bool enable);
    static void check(const char * file, int line);

    // ARB_debug_output

    /** Sets up a context specific debug message error callback that outputs
        every incomming warning/error message generated by the driver.
        This should be faster than using glGetError / CheckGLError and allows
        adjustments to error type and severity per context.

        To avoid performance loss (even in DEBUG mode) this needs to be set
        manually for every context required. Further, in DEBUG, the default 
        global gl error checking needs to be disabled manually.

        Note: this requires the GL_ARB_debug_output extension. Or at least a
        4.3 core profile. The output can be locally disabled via glEnable and
        glDisable(GL_DEBUG_OUTPUT) - this sets DEBUG_OUTPUT_SYNCHRONOUS_ARB.
    */
    static bool setupDebugOutput(const bool asynchronous = true);

protected:
	GLenum m_errorCode;

protected:
    static bool s_checking;
    static void APIENTRY debugCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const char * message, void * param);
    static const char* severityString(GLenum severity);
    static const char* sourceString(GLenum source);
    static const char* typeString(GLenum type);
};

#ifdef NDEBUG
#define CheckGLError()
#else
#define CheckGLError() glow::Error::check(__FILE__, __LINE__)
#endif

} // namespace glow
